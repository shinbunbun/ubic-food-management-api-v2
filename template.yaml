AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ubic-food-management-api-v2
  Sample SAM Template for ubic-food-management-api-v2
Parameters:
  ChannelId:
    Type: String
  ChannelSecret:
    Type: String
  S3BucketName:
    Type: String
  DomainName:
    Type: String
  HostedZoneId:
    Type: String
  CertificateArn:
    Type: String
  RedirectUri:
    Type: String
  DynamoDBArn:
    Type: String
  S3Arn:
    Type: String

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    Environment:
      Variables:
        STAGE: prod
        CHANNEL_ID: !Ref ChannelId
        CHANNEL_SECRET: !Ref ChannelSecret
        AWS_SAM_LOCAL: "false"
        S3_BUCKET_NAME: !Ref S3BucketName
        REDIRECT_URI: !Ref RedirectUri
    Runtime: go1.x
    Architectures:
      - x86_64 
  Api:
    OpenApiVersion: 2.0.0
    Domain:
      DomainName: !Ref DomainName
      CertificateArn: !Ref CertificateArn
      Route53:
        HostedZoneId: !Ref HostedZoneId

Resources:
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: api-execution-role-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - Fn::Sub: ${AuthGetFunction.Arn}
                  - Fn::Sub: ${UserGetFunction.Arn}
                  - Fn::Sub: ${TransactionDeleteFunction.Arn}
                  - Fn::Sub: ${TransactionPostFunction.Arn}
                  - Fn::Sub: ${FoodsGetFunction.Arn}
                  - Fn::Sub: ${FoodPostFunction.Arn}
                  - Fn::Sub: ${FoodPatchFunction.Arn}
                  - Fn::Sub: ${ImagePostFunction.Arn}
                  - Fn::Sub: ${CallbackGetFunction.Arn}
                  - Fn::Sub: ${AuthorizerFunction.Arn}
                  - Fn::Sub: ${KeyGeneratorFunction.Arn}
  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: "ubic-food-management-api-v2-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                Resource: !Ref DynamoDBArn
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                Resource: !Ref S3Arn
              - Effect: "Allow"
                Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                Resource: "*"
  AuthorizerFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AuthorizerFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/authorizers/*
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: "rest-api"
      StageName: prod
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./swagger.yml
      MethodSettings:
        - LoggingLevel: ERROR
          ResourcePath: '/*' 
          HttpMethod: '*' 
  AuthGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt FunctionRole.Arn
      CodeUri: functions/auth_get/
      Handler: functions/auth_get
  UserGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt FunctionRole.Arn
      CodeUri: functions/user_get/
      Handler: functions/user_get
  TransactionDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt FunctionRole.Arn
      CodeUri: functions/transaction_delete/
      Handler: functions/transaction_delete
  TransactionPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt FunctionRole.Arn
      CodeUri: functions/transaction_post/
      Handler: functions/transaction_post
  FoodsGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt FunctionRole.Arn
      CodeUri: functions/foods_get/
      Handler: functions/foods_get
  FoodPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt FunctionRole.Arn
      CodeUri: functions/food_post/
      Handler: functions/food_post
  FoodPatchFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt FunctionRole.Arn
      CodeUri: functions/food_patch/
      Handler: functions/food_patch
  ImagePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt FunctionRole.Arn
      CodeUri: functions/image_post/
      Handler: functions/image_post
  CallbackGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt FunctionRole.Arn
      CodeUri: functions/callback_get/
      Handler: functions/callback_get
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/authorizer
      Handler: functions/authorizer.lambda_handler
  KeyGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt FunctionRole.Arn
      CodeUri: functions/key_generator_get/
      Handler: functions/key_generator_get
  # LogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Sub /aws/lambda/${UBICFoodFunction}

# Outputs:
#   UBICFoodFunction:
#     Description: "First Lambda Function ARN"
#     Value: !GetAtt UBICFoodFunction.Arn
  # HelloWorldFunctionIamRole:
  #   Description: "Implicit IAM Role created for Hello World function"
  #   Value: !GetAtt HelloWorldFunctionRole.Arn
