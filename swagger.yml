swagger: '2.0'
x-stoplight:
  id: 0c23gty04mpex
info:
  description: UBIC食料管理システムAPI
  version: 1.0.0
  title: UBIC food management API
paths:
  /user:
    get:
      summary: ユーザー情報API
      description: ユーザーの情報を返します
      responses:
        '200':
          description: 成功時のレスポンス
          schema:
            type: object
            properties:
              userId:
                type: string
              name:
                type: string
              transactions:
                type: array
                items:
                  $ref: '#/definitions/transaction'
      security:
        - LambdaAuthorizer: []
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiRole.Arn}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserGetFunction.Arn}/invocations'
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-cors:
        allowOrigins:
          - '*'
      x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
            Resource:
              - "execute-api:/*"
            Condition:
              IpAddress:
                aws:SourceIp:
                  - "163.143.50.0/23"
  '/transaction/{transactionId}':
    delete:
      summary: 取引削除API（返却）
      description: |-
        指定の取引を削除するAPI
        主に返却の際に使用する
      parameters:
        - name: transactionId
          in: path
          description: 削除したい取引のID
          required: true
          type: string
        - type: boolean
          in: query
          name: is_stock_increment
          description: 在庫数を1追加するか否か
          required: true
      responses:
        '204':
          description: 成功時のレスポンス
      security:
        - LambdaAuthorizer: []
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiRole.Arn}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TransactionDeleteFunction.Arn}/invocations'
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-cors:
        allowOrigins:
          - '*'
      x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
            Resource:
              - "execute-api:/*"
            Condition:
              IpAddress:
                aws:SourceIp:
                  - "163.143.50.0/23"
  /transaction:
    post:
      summary: 取引追加API（貸し出し）
      description: |-
        新たな取引を追加するAPI
        主に貸し出し時に使用する
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              foodId:
                type: string
        - type: boolean
          in: query
          name: is_stock_decrement
          required: true
      responses:
        '200':
          description: 成功時のレスポンス
          schema:
            $ref: '#/definitions/transaction'
      security:
        - LambdaAuthorizer: []
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiRole.Arn}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TransactionPostFunction.Arn}/invocations'
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
            Resource:
              - "execute-api:/*"
            Condition:
              IpAddress:
                aws:SourceIp:
                  - "163.143.50.0/23"
  /foods:
    get:
      summary: 食料情報取得API
      description: すべての食料の情報を取得するAPI
      responses:
        '200':
          description: 成功時のレスポンス
          schema:
            type: array
            items:
              $ref: '#/definitions/food'
      security:
        - LambdaAuthorizer: []
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiRole.Arn}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FoodsGetFunction.Arn}/invocations'
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-cors:
        allowOrigins:
          - '*'
      x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
            Resource:
              - "execute-api:/*"
            Condition:
              IpAddress:
                aws:SourceIp:
                  - "163.143.50.0/23"
  /food:
    post:
      summary: 食料追加API
      description: 食料を追加する時に使うAPI
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              maker:
                type: string
              imageUrl:
                type: string
      responses:
        '200':
          description: 成功時のレスポンス
          schema:
            $ref: '#/definitions/food'
      security:
        - LambdaAuthorizer: []
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiRole.Arn}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FoodPostFunction.Arn}/invocations'
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-cors:
        allowOrigins:
          - '*'
      x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
            Resource:
              - "execute-api:/*"
            Condition:
              IpAddress:
                aws:SourceIp:
                  - "163.143.50.0/23"
  '/food/{foodId}':
    patch:
      summary: 食料情報更新API
      description: 在庫数変更に使用します
      parameters:
        - name: foodId
          in: path
          description: 更新したい食料のID
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              addNum:
                type: integer
      responses:
        '200':
          description: 成功時のレスポンス
          schema:
            $ref: '#/definitions/food'
      security:
        - LambdaAuthorizer: []
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiRole.Arn}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FoodPatchFunction.Arn}/invocations'
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-cors:
        allowOrigins:
          - '*'
      x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
            Resource:
              - "execute-api:/*"
            Condition:
              IpAddress:
                aws:SourceIp:
                  - "163.143.50.0/23"
  /image:
    post:
      summary: 画像アップロードAPI
      consumes:
        - image/jpeg
      parameters:
        - name: image
          in: body
          schema:
            type: string
            format: base64
      responses:
        '200':
          description: 成功時のレスポンス
          schema:
            type: object
            properties:
              imageUrl:
                type: string
      security:
        - LambdaAuthorizer: []
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiRole.Arn}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ImagePostFunction.Arn}/invocations'
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-cors:
        allowOrigins:
          - '*'
      x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
            Resource:
              - "execute-api:/*"
            Condition:
              IpAddress:
                aws:SourceIp:
                  - "163.143.50.0/23"
  /key_generator:
    get:
      summary: APIキー作成API
      description: クライアントアプリケーションのAPIキーを作成するAPI
      responses:
        '200':
          description: 成功時のレスポンス
          schema:
            type: array
            items:
              $ref: '#/definitions/food'
      security:
        - LambdaAuthorizer: []
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiRole.Arn}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${KeyGeneratorFunction.Arn}/invocations'
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-cors:
        allowOrigins:
          - '*'
      x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
            Resource:
              - "execute-api:/*"
            Condition:
              IpAddress:
                aws:SourceIp:
                  - "163.143.50.0/23"
  /auth:
    get:
      summary: LINEログイン
      responses:
        '302':
          description: 成功時のレスポンス
          headers:
            Location:
              type: string
              description: 'https://access.line.me/oauth2/v2.1/authorize?response_type=code&client_id=${channelId}&redirect_uri=${redirectUri}&state=${stateHash}&scope=openid%20email%20profile&nonce=${nonceHash}'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiRole.Arn}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthGetFunction.Arn}/invocations'
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
            Resource:
              - "execute-api:/*"
            Condition:
              IpAddress:
                aws:SourceIp:
                  - "163.143.50.0/23"
  /callback:
    get:
      summary: LINEログインのコールバックエンドポイント
      description: Authentication Requestのコールバックエンドポイント
      parameters:
        - name: query
          in: query
          type: array
          items:
            type: string
            enum:
              - code
              - state
      responses:
        '302':
          description: 成功時のレスポンス
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiRole.Arn}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CallbackGetFunction.Arn}/invocations'
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
            Resource:
              - "execute-api:/*"
            Condition:
              IpAddress:
                aws:SourceIp:
                  - "163.143.50.0/23"
definitions:
  food:
    type: object
    properties:
      id:
        type: string
      imageUrl:
        type: string
      maker:
        type: string
      name:
        type: string
      stock:
        type: integer
  transaction:
    type: object
    properties:
      id:
        type: string
      date:
        type: integer
      food:
        $ref: '#/definitions/food'
securityDefinitions:
  LambdaAuthorizer:
    type: apiKey
    in: header
    name: Authorization
    x-amazon-apigateway-authtype: custom
    x-amazon-apigateway-authorizer:
      authorizerUri:
        'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations'
      authorizerResultTtlInSeconds: 0
      type: token
    description: LINEログインのIdToken
